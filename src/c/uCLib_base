/*
 * RISC OS uCLib (Micro C Library)
 * 
 * purpouse: This is a small (micro) re-implementation of a generic
 *           C Library to use on RISC OS to build utils (transient)
 *           executables  using  the C  Programming  language  and,
 *           hopefully, C++ as well.
 *           Please note: This library is NOT a replacement for the
 *           Acorn/ROOL  SharedCLib (SCL)  or  the  ANSILib (ANSL).
 *           It is  intended for use  with applications that do not
 *           need the  entire  SCL or ANSL,  that  wish to  have no
 *           dependecies  on  the  SCL/ANSL and still use C for the
 *           source coding.
 *
 *   author: Paolo Fabio Zaino
 *  release: 0.0.0
 * 
 * Copyright 2004 by Paolo Fabio Zaino
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions, the distribution license and the
 * following disclaimer.
 * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials
 * provided with the distribution.
 * Neither the name of the author nor the names of the contributors
 * may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License
 * the restrictions above and the disclaimer below.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 */

#include "uCLib.h"

void sys_exit(int error_code)
{
	// TODO: Improve code to handle error block
	__asm
	{
		MOV r0, #0
		MOV r1, #ABEX
		MOV r2, error_code
		SWI OS_Exit, {r0-r2}, {}, {}
	}
}

int sys_write_stdout(const char *buf, unsigned count)
{
	int rval = 0;
	if ( count == 0 ) {
		// Display a null terminated string
		__asm
		{
			MOV r0, buf
			SWI OS_Write0, {r0}
		}
	} else {
		// Display a string of "count" lenght
		__asm
		{
			STMFD sp, {r0,r1,r2}
			MOV   a1, #0
			MOV   a2, buf
			MOV   a3, count
		loop:
			LDRB  a1, [a2], #1
			CMP   a3, #0
			BEQ   done
			SWI   OS_WriteC, {a1}
			ADD   a2, a2, #1
			SUBS  a3, a3, #1
			B     loop
		done:
			LDMFD sp, {r0,r1,r2}
		}
	}
	return rval;
}

void sys_write_newline(void)
{
	// Display a New Line
	__asm
	{
		SWI OS_NewLine
	}
}

int sys_write(unsigned fd, const char *buf, unsigned count)
{
	int rval = 0;
	switch (fd)
	{
		 case 0:// Ignore
				break;
		 case 1:// STDOUT
		default:// Default is stdout
				rval = sys_write_stdout(buf, count);
	}
	return rval;
}

